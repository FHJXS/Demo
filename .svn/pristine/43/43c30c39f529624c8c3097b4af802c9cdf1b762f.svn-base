package com.news.controller;

import java.time.LocalDateTime;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.news.dto.ResultData;
import com.news.entity.User;
import com.news.service.UserService;
import com.news.utils.JWTUtil;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

@RestController
@RequestMapping("/api/user")
@Api(tags = "UserInterfaceApi", description = "用户管理接口")
public class UserController {

	@Autowired
	private UserService userService;

	/**
	 * 用户Token登录
	 * 
	 * @param login_id
	 * @return
	 */
	@ApiOperation(value = "用户登录", notes = "根据表单用户名密码登录")
	@ApiImplicitParams({
			@ApiImplicitParam(name = "login_id", value = "用户账号", required = true, dataType = "String", paramType = "query", example = "admin"),
			@ApiImplicitParam(name = "token", value = "用户token", required = true, dataType = "String", paramType = "query", example = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbl9pZCI6ImFkbWluIn0.x6TX6mpL1Xs0cPoHfIagN9S6r63AeBFq9yJJhUdbdnw") })
	@RequestMapping(value = "/loginToken", method = RequestMethod.POST)
	public Object loginByToken(@RequestParam(value = "login_id") String login_id) {
		Assert.notNull(login_id, "登录账号不能为空");
		QueryWrapper<User> queryWrapper = new QueryWrapper<>();
		queryWrapper.lambda().eq(User::getLoginId, login_id);
		User user = userService.getOne(queryWrapper);
		if (user == null) {
			return ResultData.failed("登录失败");
		}
		UpdateWrapper<User> updateWrapper = new UpdateWrapper<>();
		updateWrapper.lambda().eq(User::getLoginId, login_id).set(User::getLastTime, LocalDateTime.now());
		userService.update(updateWrapper);
		user.setToken(JWTUtil.sign(user.getLoginId()));
		return ResultData.success(user, "登陆成功");
	}

	/**
	 * 用户登录
	 * 
	 * @param login_id
	 * @param password
	 * @return
	 */
	@ApiOperation(value = "用户登录", notes = "根据表单用户名密码登录")
	@ApiImplicitParams({
			@ApiImplicitParam(name = "login_id", value = "用户账号", required = true, dataType = "String", paramType = "query", example = "admin"),
			@ApiImplicitParam(name = "password", value = "用户密码", required = true, dataType = "String", paramType = "query", example = "123456") })
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public Object login(@RequestParam(value = "login_id") String login_id,
			@RequestParam(value = "password") String password) {
		Assert.notNull(login_id, "登录账号不能为空");
		Assert.notNull(password, "登录密码不能为空");
		QueryWrapper<User> queryWrapper = new QueryWrapper<>();
		queryWrapper.lambda().eq(User::getLoginId, login_id).eq(User::getPassWord, password);
		User user = userService.getOne(queryWrapper);
		if (user == null) {
			return ResultData.failed("登录失败");
		}
		UpdateWrapper<User> updateWrapper = new UpdateWrapper<>();
		updateWrapper.lambda().eq(User::getLoginId, login_id).set(User::getLastTime, LocalDateTime.now());
		userService.update(updateWrapper);
		user.setToken(JWTUtil.sign(user.getLoginId()));
		return ResultData.success(user, "登陆成功");
	}

	/**
	 * 根据ID查询用户
	 * 
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "获取用户详细信息", notes = "根据url的user_id来获取用户详细信息")
	@ApiImplicitParam(name = "user_id", value = "用户ID", required = true, dataType = "Integer", paramType = "path", example = "1")
	@RequestMapping(value = "/{user_id}", method = RequestMethod.GET)
	public Object getUserById(@PathVariable(value = "user_id") Integer user_id) {
		Assert.notNull(user_id, "用户user_id不能为空");
		return ResultData.success(userService.getById(user_id), "查询成功");
	}

	/**
	 * 查询用户列表
	 * 
	 * @return
	 */
	@ApiOperation(value = "获取用户列表", notes = "获取用户列表")
	@RequestMapping(value = "/users", method = RequestMethod.GET)
	public Object getUserList() {
		return ResultData.success(userService.getBaseMapper().selectList(null), "查询成功");
	}

	/**
	 * 根据id删除用户
	 * 
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "删除用户", notes = "根据url的id来指定删除用户")
	@ApiImplicitParam(name = "user_id", value = "用户ID", required = true, dataType = "Long", paramType = "path", example = "1")
	@RequestMapping(value = "/{user_id}", method = RequestMethod.DELETE)
	public Object delete(@PathVariable(value = "user_id") Integer user_id) {
		Assert.notNull(user_id, "用户user_id不能为空");
		return ResultData.success(userService.getBaseMapper().deleteById(user_id), "删除成功");
	}
}
